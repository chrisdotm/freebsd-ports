.TH RD-OPTIONS 1 "November 20, 2010" "RunDeck User Manuals" "Version 1.2.1"
.SH NAME
.PP
rd-options - introduction to rundeck dispatcher options
.SH DESCRIPTION
.PP
Both the dispatch and run commands can use the node-dispatch
feature to execute commands on remote nodes.
.PP
Finally the base set is filtered based on the filtering options
specified on the command line, as described below.
.SH FILTERING OPTIONS
.PP
Both run and dispatch can use the commandline options -I (include,
aka --nodes) and -X (exclude, aka --xnodes) to specify which nodes
to include and exclude from the base set of nodes.
.PP
You can specify a single value, a list of values, or a regular
expression as the argument to these options.
.PP
When only inclusion filters (-I) are specified, then only the nodes
from the base set that match those filters are used.
.PP
\f[I]Examples\f[]
.PP
\f[CR]
      dispatch\ -I\ dev01\ --\ ps
      dispatch\ -I\ dev01,dev02\ --\ ps
      dispatch\ -I\ dev.*\ --\ ps
\f[]
.PP
This executes the ps command using various selector types.
The first matches only the node with hostname dev01, the second two
nodes with hostnames dev01 and dev02, and the third all nodes with
hostnames that match the regular expression dev.*.
.PP
When only exclusion filters (-X) are specified, then only the nodes
from the base set that do not match those filters are used.
.PP
\f[I]Examples\f[]
.PP
\f[CR]
      dispatch\ -X\ web01\ --\ ps
      dispatch\ -X\ web01,web02\ --\ ps
      dispatch\ -X\ "web.*"\ --\ ps
\f[]
.PP
This executes the `ps' command by excluding nodes based on hostname
selectors, thus it will execute on all nodes that are not matched
by the exclusion filters.
.PP
By default, the -I and -X options are used to filter based on the
node hostname property, as it is specified in the nodes.properties
file.
.PP
However, keywords can be used to specify other properties to filter
on besides hostname.
.SH KEYWORDS
.PP
Keywords are specifed by using one of the filter options with
\[lq]key=value\[rq] as the argument to the option.
.PP
\f[I]Example\f[]
.PP
\f[CR]
      dispatch\ -I\ os-name=Linux\ --\ ps
\f[]
.PP
This executes on all nodes with an operating system named
\[lq]Linux\[rq].
.PP
Notice that the argument to -I specifies os-name= and then the
value Linux.
The keyword used is os-name, and so the filter will match the
\[lq]os-name\[rq] property in nodes.properties.
.PP
The available keywords are:
.IP \[bu] 2
hostname : hostname of the node [default keyword]
.IP \[bu] 2
name : resource name of the node, which may be different than
hostname
.IP \[bu] 2
type : type name of the node, typically \[lq]Node\[rq]
.IP \[bu] 2
tags : a set of user defined tags
.IP \[bu] 2
os-name : operating system name, e.g.\ \[lq]Linux\[rq],
\[lq]Macintosh OS X\[rq]
.IP \[bu] 2
os-family : operating system familiy,
e.g.\ \[lq]windows\[rq],\[lq]unix\[rq]
.IP \[bu] 2
os-arch : operating system CPU architecture, e.g.\ \[lq]x86\[rq],
\[lq]x386\[rq]
.IP \[bu] 2
os-version : operating system version number
.PP
All of the keywords can accept a single value, a comma-separated
list, or a regular expression.
.SH TAGS
.PP
In addition, the tags keyword can use the boolean operator + to
represent logical AND.
The comma used to separate lists serves as logical OR.
The following example matches all nodes tagged with both
\[lq]devel\[rq] AND \[lq]secure\[rq], OR with \[lq]server\[rq]:
.PP
\f[CR]
      dispatch\ -I\ tags=devel+secure,server\ --\ ps
\f[]
.SS Combining Options
.PP
All keywords can be combined by specifying the -I or -X options
multiple times on the command line.
.PP
The following example includes all nodes tagged with both
\[lq]devel\[rq] and \[lq]secure\[rq], as well as all nodes with
hostnames matching web.*:
.PP
\f[CR]
      dispatch\ -I\ tags=devel+secure\ -I\ web.*\ --\ ps
\f[]
.PP
The following includes all nodes tagged with both \[lq]devel\[rq]
and \[lq]secure\[rq], as well as all nodes with hostnames matching
web.*, and excludes the node with hostname \[lq]web01\[rq]:
.PP
\f[CR]
      dispatch\ -X\ web01\ -I\ tags=devel+secure\ -I\ web.*\ --\ ps
\f[]
.PP
Note, however, that you cannot specify the same keyword multiple
times for the same type of filter:
.PP
WRONG:
.PP
\f[CR]
      dispatch\ -X\ web01\ -X\ dev01\ -I\ tags=devel+secure\ -I\ web.*\ --\ ps
\f[]
.PP
This example will not exclude the node \[lq]web01\[rq], because
there are two -X options with the same keyword.
Both -X web01 and -X dev01 default to the \[lq]hostname\[rq]
keyword, and the second entry will override the first.
To exclude both of those nodes, you must combine them for the
option -X web01,dev01:
.PP
CORRECT:
.PP
\f[CR]
      dispatch\ -X\ web01,dev01\ -I\ tags=devel+secure\ -I\ web.*\ --\ ps
\f[]
.PP
The last example brings up the issue of Precedence.
The command line first specifies -X web01, then later specifies
\[lq]-I web.*\[rq].
However, the hostname \[lq]web01\[rq] would be matched by the
regular expression \[lq]web.*\[rq].
So is the node with hostname \[lq]web01\[rq] included in the set of
nodes to execute on, or is it excluded?
.SH Attributes
.PP
Arbitrary attributes can be used in node filtering as well.
If you add Setting resources or other Resources to the Node object,
any Attributes exported by those resources are available for Node
filtering.
.PP
Simply specify the attribute name as a filter with one of the -I/-X
arguments:
.PP
\f[CR]
      dispatch\ -I\ my-attribute=true\ --\ ps
\f[]
.PP
This will execute ps on any node with an attribute named
my-attribute with a value of \[lq]true\[rq].
.SH Precedence
.PP
Precedence is the issue of whether a node should be included in the
result set when it matches both an exclusion filter and an
inclusion filter.
.PP
Take a simplified example:
.PP
\f[CR]
      dispatch\ -X\ web01\ -I\ web.*\ --\ ps
\f[]
.PP
The intent is to exclude \[lq]web01\[rq] while including all other
nodes matching the regular expression \[lq]web.*\[rq].
Depending on which filter takes precedence, the exclusion filter or
the inclusion filter, the result may be different.
.PP
When inclusion has precedence, nodes that match both filters will
be included.
When exclusion has precedence, nodes that match both filters will
be excluded.
So which filter has precedence?
.PP
The first filter specified on a command line takes precedence.
This means that if you specify any -X option before a -I option,
then exclusion will take precedence, and vice versa.
.PP
So in the example above, the -X takes precedence (it is first), and
so the node with hostname \[lq]dev01\[rq] is excluded from the
result set.
.PP
If you change the order of the options:
.PP
\f[CR]
      dispatch\ -I\ web.*\ -X\ web01\ --\ ps
\f[]
.PP
Then the node with hostname \[lq]web01\[rq] will be included in the
results.
.PP
Note: When only one filter is used, either -I or -X, there is no
need to worry about precedence.
.PP
In general, a good rule of thumb when trying to determine which
precedence you need is to specify the most restrictive filter
first.
.PP
For an inverse example, suppose you want to dispatch to all
non-windows nodes, but you want to include any nodes tagged with
\[lq]development\[rq].
You might try this at first:
.PP
WRONG:
.PP
\f[CR]
      dispatch\ -X\ os-family=windows\ -I\ tags=development\ --\ ps
\f[]
.PP
This will not return the correct result set, because the -X takes
precedence as it is the first filter on the line.
So any nodes that have both os-family=windows and tag=development
will be excluded.
.PP
CORRECT:
.PP
\f[CR]
      dispatch\ -I\ tags=development\ -X\ os-family=windows\ --\ ps
\f[]
.PP
Here since the -I is specified first, the inclusion filter has
precedence, and any nodes that have both os-family=windows and
tag=development will be included in the result.
.SH Explicit Precedence using --filter-exclude-precedence
.PP
Using the \[em]filter-exclude-precedence command-line option, the
precedence can be set explicitly.
The argument is \[lq]true\[rq] or \[lq]false\[rq].
When the argument is \[lq]true\[rq] then the exclusion filter takes
precedence, regardless of the order of the filter options.
When the argument is \[lq]false\[rq] then the inclusion filter
takes precedence.
.PP
\f[CR]
      dispatch\ -I\ web.*\ -X\ web01\ --filter-exclude-precedence\ true\ --\ ps
\f[]
.PP
This command-line correctly excludes the \[lq]web01\[rq] node
because the \[em]filter-exclude-precedence option is set to
\[lq]true\[rq].
.SH Retrying on failed nodes
.PP
When the -K option is specified to run or dispatch, then the
command will be executed on all matched nodes, even if some nodes
fail during the process.
The list of which nodes failed will be printed at the end of the
sequence.
.PP
\f[CR]
      Command\ failed:\ Execution\ failed\ on\ the\ following\ nodes:\ [calculon,centos5]
\f[]
.PP
If you simply execute a command with some node filters and the -K
option, then a message is printed echoing the same commandline that
you executed, but with the list of failed nodes inserted as the
node filters:
.PP
\f[CR]
      $\ dispatch\ -I\ tags=something\ -K\ -p\ demo\ -s\ myscript.sh
      ....
      Command\ failed:\ Execution\ failed\ on\ the\ following\ nodes:\ [calculon,centos5]
      Execute\ this\ command\ to\ retry\ on\ the\ failed\ nodes:
      \ \ \ \ dispatch\ -I\ name=calculon,centos5\ -K\ -p\ demo\ -s\ myscript.sh
\f[]
.PP
You can copy and paste the printed command to retry the same
command only on the list of failed nodes.
.SS Storing the failed node list in a file:
.PP
Jobs and dispatch have an option that stores the list of nodes
where the command failed into a file, which can then be specified
again to re-execute the command on only those failed nodes.
.PP
Use the \[lq]failednodes\[rq] option:
.PP
\f[CR]
      -F,--failednodes\ Filepath\ to\ store\ failed\ nodes
\f[]
.PP
When you specify a set of Node filters, as well as the -K option,
also include the -F option with the path to a file.
.PP
E.g.:
.PP
\f[CR]
      $\ dispatch\ -K\ -F\ /home/ctier/tempnodes\ -I\ tags=mynodes\ -p\ demo\ --\ ps
\f[]
.PP
If the execution fails on some nodes, that list is stored in the
file, and an additional message is printed:
.PP
\f[CR]
      error:\ Execute\ this\ command\ to\ retry\ on\ the\ failed\ nodes:\ \ \ \ 
      dispatch\ -K\ -F\ /home/ctier/tempnodes\ -p\ demo\ --\ ps
\f[]
.PP
Notice that this command specifies the same filepath as originally
specified, but not the Node filtering options.
The list of nodes will be read from the file.
.PP
When all the executions succeed on the nodes, any file at the
specified path will be deleted.
This means that you can have some looping logic in a shell script
to re-try the execution if the specified file exists:
.PP
\f[CR]
      #!/bin/bash
      COMMAND=...
      NODEFILE=/home/ctier/tempnodes
      dispatch\ -K\ -F\ $NODEFILE\ -I\ tags=mynodes\ -p\ demo\ --\ $COMMAND
      if\ [\ -f\ $NODEFILE\ ]\ ;\ then
      \ \ \ #\ since\ the\ node\ file\ exists,\ some\ nodes\ failed,\ retry.
      \ \ dispatch\ -K\ -F\ $NODEFILE\ -p\ demo\ --\ $COMMAND\ \ \ 
      fi
      
      if\ [\ -f\ $NODEFILE\ ]\ ;\ then
      \ \ #\ if\ the\ file\ still\ exists,\ then\ some\ nodes\ failed\ again
      \ echo\ "Some\ nodes\ failed\ after\ retry,\ aborting..."
      \ exit\ 1
      fi
\f[]
.SH SEE ALSO
.PP
\f[B]dispatch\f[] (1), \f[B]run\f[] (1), \f[B]rd-jobs\f[] (1).
.PP
The RunDeck source code and all documentation may be downloaded
from <https://github.com/dtolabs/rundeck/>.
.SH AUTHORS
Greg Schueler; Alex Honor.

